$PBExportHeader$m_mdiframe.srm
$PBExportComments$メイン MDI フレーム ウィンドウのメニュー
forward
global type m_mdiframe from menu
end type
type m_file from menu within m_mdiframe
end type
type m_totalsalaryreport from menu within m_file
end type
type m_open from menu within m_file
end type
type m_controlbreakreport from menu within m_file
end type
type m_departmentlist from menu within m_file
end type
type m_-1 from menu within m_file
end type
type m_close from menu within m_file
end type
type m_exit from menu within m_file
end type
type m_file from menu within m_mdiframe
m_totalsalaryreport m_totalsalaryreport
m_open m_open
m_controlbreakreport m_controlbreakreport
m_departmentlist m_departmentlist
m_-1 m_-1
m_close m_close
m_exit m_exit
end type
type m_window from menu within m_mdiframe
end type
type m_tile from menu within m_window
end type
type m_horizontal from menu within m_window
end type
type m_layer from menu within m_window
end type
type m_cascade from menu within m_window
end type
type m_- from menu within m_window
end type
type m_arrangeicons from menu within m_window
end type
type m_window from menu within m_mdiframe
m_tile m_tile
m_horizontal m_horizontal
m_layer m_layer
m_cascade m_cascade
m_- m_-
m_arrangeicons m_arrangeicons
end type
type m_help from menu within m_mdiframe
end type
type m_contents from menu within m_help
end type
type m_-2 from menu within m_help
end type
type m_about from menu within m_help
end type
type m_help from menu within m_mdiframe
m_contents m_contents
m_-2 m_-2
m_about m_about
end type
end forward

global type m_mdiframe from menu
m_file m_file
m_window m_window
m_help m_help
end type
global m_mdiframe m_mdiframe

on m_mdiframe.create
m_mdiframe=this
this.m_file=create m_file
this.m_window=create m_window
this.m_help=create m_help
this.Item[]={this.m_file, &
this.m_window, &
this.m_help}
end on

on m_mdiframe.destroy
destroy(this.m_file)
destroy(this.m_window)
destroy(this.m_help)
end on

type m_file from menu within m_mdiframe
m_totalsalaryreport m_totalsalaryreport
m_open m_open
m_controlbreakreport m_controlbreakreport
m_departmentlist m_departmentlist
m_-1 m_-1
m_close m_close
m_exit m_exit
end type

on m_file.create
this.Text="ファイル(&F)"
this.Microhelp="レポートを選択するか、 アプリケーションを終了します。"
this.m_totalsalaryreport=create m_totalsalaryreport
this.m_open=create m_open
this.m_controlbreakreport=create m_controlbreakreport
this.m_departmentlist=create m_departmentlist
this.m_-1=create m_-1
this.m_close=create m_close
this.m_exit=create m_exit
this.Item[]={this.m_totalsalaryreport, &
this.m_open, &
this.m_controlbreakreport, &
this.m_departmentlist, &
this.m_-1, &
this.m_close, &
this.m_exit}
end on

on m_file.destroy
destroy(this.m_totalsalaryreport)
destroy(this.m_open)
destroy(this.m_controlbreakreport)
destroy(this.m_departmentlist)
destroy(this.m_-1)
destroy(this.m_close)
destroy(this.m_exit)
end on

type m_totalsalaryreport from menu within m_file
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
//Clicked script for m_totalsalaryreport
//////////////////////////////////////////////////////////////////////////////////////////////

SetPointer(HourGlass!)

w_mdi_main_sheet w_mdichild_spawn
mdi_main_structure parm
parm.title = '合計給与: '
parm.datawindow_name = 'd_sum_dept_salary'
if isvalid(w_drag_a_dept) then
	w_drag_a_dept.wf_current_dept(parm.dept,parm.dept_name)
else
	parm.dept = 0
end if

OpenSheetwithparm(w_mdichild_spawn, parm, ParentWindow, 0, Cascaded!)
end event

on m_totalsalaryreport.create
this.Text="合計給与レポート(&T)"
this.Microhelp="部署別の合計給与レポートを表示します。"
end on

type m_open from menu within m_file
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
//Clicked script for m_open
//////////////////////////////////////////////////////////////////////////////////////////////

SetPointer(HourGlass!)

w_mdi_main_sheet w_mdichild_spawn
mdi_main_structure parm
parm.title =   "平均給与: "
parm.datawindow_name = 'd_average_dept_salary'
if isvalid(w_drag_a_dept) then
	w_drag_a_dept.wf_current_dept(parm.dept,parm.dept_name)
else
	parm.dept = 0
end if

OpenSheetWithParm(w_mdichild_spawn, parm, ParentWindow, 0, Cascaded!)
end event

on m_open.create
this.Text="平均給与レポート(&A)"
this.Microhelp="部署別の平均給与レポートを表示します。"
end on

on m_open.destroy
end on

type m_controlbreakreport from menu within m_file
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
//Clicked script for m_controlbreakreport
//////////////////////////////////////////////////////////////////////////////////////////////

SetPointer(HourGlass!)

w_mdi_main_sheet w_mdichild_spawn
mdi_main_structure parm
parm.title =   "勤務状況別の平均給与: "
parm.datawindow_name = 'd_average_by_status'
if isvalid(w_drag_a_dept) then
	w_drag_a_dept.wf_current_dept(parm.dept,parm.dept_name)
else
	parm.dept = 0
end if

OpenSheetWithParm(w_mdichild_spawn, parm, ParentWindow, 0, Cascaded!)
end event

on m_controlbreakreport.create
this.Text="勤務状況別の平均給与レポート(&S)"
this.Microhelp="勤務状況別の平均給与レポートを表示します。"
end on

type m_departmentlist from menu within m_file
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_departmentlist
//////////////////////////////////////////////////////////////////////////////////////////////

SetPointer(HourGlass!)

OpenSheet(w_drag_a_dept, parentwindow, 0, original!)

end event

on m_departmentlist.create
this.Text="部署一覧を開く(&D)"
this.Microhelp="部署一覧を開きます。"
end on

type m_-1 from menu within m_file
end type

on m_-1.create
this.Text="-"
end on

type m_close from menu within m_file
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_close
//////////////////////////////////////////////////////////////////////////////////////////////

// close the current sheet
close(parentwindow)
end event

on m_close.create
this.Text="レポートを閉じる(&C)~tCtrl+F4"
this.Microhelp="現行のシートを閉じます。"
this.Visible=false
this.Enabled=false
this.Shortcut=371
end on

type m_exit from menu within m_file
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_exit
//////////////////////////////////////////////////////////////////////////////////////////////

window win
win = parentwindow.getactivesheet()
if isvalid(win) then 
	win = parentwindow(win)
else
	win = parentwindow
end if

Close(win)
end event

on m_exit.create
this.Text="終了(&X)"
this.Microhelp="サンプルを終了します。"
end on

type m_window from menu within m_mdiframe
m_tile m_tile
m_horizontal m_horizontal
m_layer m_layer
m_cascade m_cascade
m_- m_-
m_arrangeicons m_arrangeicons
end type

on m_window.create
this.Text="ウィンドウ(&W)"
this.m_tile=create m_tile
this.m_horizontal=create m_horizontal
this.m_layer=create m_layer
this.m_cascade=create m_cascade
this.m_-=create m_-
this.m_arrangeicons=create m_arrangeicons
this.Item[]={this.m_tile, &
this.m_horizontal, &
this.m_layer, &
this.m_cascade, &
this.m_-, &
this.m_arrangeicons}
end on

on m_window.destroy
destroy(this.m_tile)
destroy(this.m_horizontal)
destroy(this.m_layer)
destroy(this.m_cascade)
destroy(this.m_-)
destroy(this.m_arrangeicons)
end on

type m_tile from menu within m_window
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_tile
//////////////////////////////////////////////////////////////////////////////////////////////

ParentWindow.ArrangeSheets(Tile!)
end event

on m_tile.create
this.Text="左右に並べて表示(&V)"
this.Microhelp="ウィンドウを左右に並べて表示します。"
end on

type m_horizontal from menu within m_window
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_horizontal
//////////////////////////////////////////////////////////////////////////////////////////////

ParentWindow.ArrangeSheets(TileHorizontal!)
end event

on m_horizontal.create
this.Text="上下に並べて表示(&H)"
this.Microhelp="ウィンドウを上下に並べて表示します。"
end on

type m_layer from menu within m_window
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_layer
//////////////////////////////////////////////////////////////////////////////////////////////

ParentWindow.ArrangeSheets(Layer!)
end event

on m_layer.create
this.Text="上重ね表示(&L)"
this.Microhelp="ウィンドウを上重ねて表示します。"
end on

type m_cascade from menu within m_window
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_cascade
//////////////////////////////////////////////////////////////////////////////////////////////

ParentWindow.ArrangeSheets(Cascade!)
end event

on m_cascade.create
this.Text="重ねて表示(&C)"
this.Microhelp="ウィンドウを重ねて表示します。"
end on

type m_- from menu within m_window
end type

on m_-.create
this.Text="-"
end on

type m_arrangeicons from menu within m_window
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_arrangeicons
//////////////////////////////////////////////////////////////////////////////////////////////

ParentWindow.ArrangeSheets(Icons!)
end event

on m_arrangeicons.create
this.Text="アイコンの整列(&I)"
this.Microhelp="アイコンを整列させます。"
end on

type m_help from menu within m_mdiframe
m_contents m_contents
m_-2 m_-2
m_about m_about
end type

on m_help.create
this.Text="ヘルプ(&H)"
this.m_contents=create m_contents
this.m_-2=create m_-2
this.m_about=create m_about
this.Item[]={this.m_contents, &
this.m_-2, &
this.m_about}
end on

on m_help.destroy
destroy(this.m_contents)
destroy(this.m_-2)
destroy(this.m_about)
end on

type m_contents from menu within m_help
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_contents
//////////////////////////////////////////////////////////////////////////////////////////////

f_open_help ("w_mdi_main")
end event

on m_contents.create
this.Text="機能説明(&C)...~tF1"
this.Microhelp="サンプルのヘルプを表示します。"
this.Shortcut=112
end on

type m_-2 from menu within m_help
end type

on m_-2.create
this.Text="-"
end on

type m_about from menu within m_help
end type

event clicked;//////////////////////////////////////////////////////////////////////////////////////////////
// Clicked script for m_about
//////////////////////////////////////////////////////////////////////////////////////////////

SetPointer(HourGlass!)
OpenWithParm (w_about_with_parm, '部署リポート@')
end event

on m_about.create
this.Text="バージョン情報(&A)..."
this.Microhelp="バージョン情報を表示します。"
end on

